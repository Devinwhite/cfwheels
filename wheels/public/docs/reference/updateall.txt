
updateAll([ where, include, properties, reload, parameterize, instantiate, validate, transaction, callbacks, includeSoftDeletes ])


<span class="cm-s-neo"><span class="cm-comment">//</span> <span class="cm-comment">Update the `published` and `publishedAt` properties for all records that have</span> <span class="cm-comment">`published=0`</span> <span class="cm-comment"></span> <span class="cm-tag cm-bracket"><</span><span class="cm-tag">cfset</span> <span class="cm-attribute">recordsUpdated</span> = <span class="cm-string">model(</span><span class="cm-string cm-error">"post"</span><span class="cm-attribute">).updateAll(</span> <span class="cm-attribute">published</span>=<span class="cm-string">1,</span> <span class="cm-attribute">publishedAt</span>=<span class="cm-string">Now(),</span> <span class="cm-attribute">where</span>=<span class="cm-string">"published=0"</span> <span class="cm-attribute">)</span><span class="cm-tag cm-bracket">></span> <span class="cm-comment">//</span> <span class="cm-comment">If you have a `hasMany` association setup from `post` to `comment`, you can</span> <span class="cm-comment">do a scoped call. (The `removeAllComments` method below will call</span> <span class="cm-comment">`model("comment").updateAll(postid="", where="postId=#post.id#")`</span> <span class="cm-comment">internally.)</span> <span class="cm-comment"></span> <span class="cm-tag cm-bracket"><</span><span class="cm-tag">cfset</span> <span class="cm-attribute">post</span> = <span class="cm-string">model(</span><span class="cm-string cm-error">"post"</span><span class="cm-attribute">).findByKey(params.postId)</span><span class="cm-tag cm-bracket">></span> <span class="cm-tag cm-bracket"><</span><span class="cm-tag">cfset</span> <span class="cm-attribute">post.removeAllComments()</span><span class="cm-tag cm-bracket">></span></span>

